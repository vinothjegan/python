# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n9cXcWBCaw38pgyM9zk-c8W9uh7sTsz0
"""

import numpy as np

a = np.array([1,2,3], dtype = 'int16')
print(a)

b = np.array([[3,5,6],[8,5,7]])
print(b)

# Get dimension
a.ndim

b.ndim

a.shape

b.shape

a.dtype

a.itemsize

a.size

a.size * a.itemsize

a.nbytes

c=np.array([[1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1]])
c

#Get a specific element[r,c]
c[1,7]

c[1,-3]

#Get a specific row
c[0, : ]

c[:,2]

#Getting a little more fancy[startindex:endindex:stepsize]
c[0,1:8:2]

c[0,1:-1:2]

c

c[1,1]=12
c

c[:,2]=5
c

c[:,1] = [1,2]
c

d=np.array([[[1,2],[3,4]],[[5,6],[7,8]]])
d

d[0,1,1]

d[:,1,:]

d[:,1,:] = [[9,9],[8,8]]
d

# All 0s matrix
np.zeros((2,3,))

np.ones((2,3,4), dtype='int32')

np.full((2,2),99,dtype='float32')

# Any other number (full_like)
np.full_like(c.shape,4)

np.full_like(c,4)

#Random decimal numbers
np.random.rand(4,3)

np.random.random_sample(c.shape)

#Random integer values
np.random.randint(7,size=(3,3))

np.random.randint(4,7,size=(3,3))

#Identity matrix
np.identity(3)

arr = np.array([1,2,3])
r1 = np.repeat(arr,3)
r1

arr = np.array([[1,2,3]])
r1 = np.repeat(arr,3,axis=0)
r1

output=np.ones((5,5))
print(output)

z=np.zeros((3,3))
z[1,1]=9
print(z)
output[1:4,1:4]=z
print(output)

#Be careful when copying arrays!!!
e=np.array([1,2,3])
f=e.copy()
f[0]=5
print(f)
print(e)

#Mathematics
a = np.array([1,2,3,4,5])
a

a+2

a-2

a/2

b=np.array([5,6,7,8,9])

a+b

a-b

a**2

# Take the sin
np.sin(a)

np.cos(a)

#LINEAR ALGEBRA
a=np.ones((2,3))
print(a)
b=np.full((3,2),2)
print(b)

np.matmul(a,b)

#FIND THE DETERMINANT
c =np.identity(3)
np.linalg.det(c)

#Determinant
#Trace
#Singular vector Decomposition
#Eigenvalus
#Matrix Norm
#Inverse
#Etc...

#STATISTICS
stats=np.array([[1,2,3],[4,5,6]])
stats

print(np.min(stats))
print(np.min(stats,axis=1))

print(np.max(stats))
print(np.max(stats,axis=1))

print(np.mean(stats))
print(np.mean(stats,axis=1))

np.sum(stats)

#REORGANIZING ARRAYS
before=np.array([[1,2,3,4],[5,6,7,8,]])
print(before)

after= before.reshape((4,2))
print(after)

#VERTICALLY STACKING VECTORS
v1=np.array([1,2,3,4])
v2=np.array([5,6,7,8])
print(np.vstack([v1,v2]))
print(np.vstack([v1,v2,v1,v2]))

h1=np.array([1,2,3,4])
h2=np.array([5,6,7,8])
np.hstack((h1,h2))

#MISCELLANEOUS
#Load Data from File

filedata=np.genfromtxt('/content/drive/MyDrive/program/pokemon_data.txt',delimiter=',')
filedata= filedata.astype('int32')
filedata

### Boolean masking and advanced indexing
filedata[filedata>50]

# you can index with a list in numpy
a=np.array([1,2,3,4,5,6,7,8,9])
a[[1,2,8]]

np.any(a>10,axis=0)

np.any(a>1,axis=0)

np.any(a>5,axis=0)

np.all(a>0,axis=0)

np.all(a>=1,axis=0)

((a>=1)&(a<10))

